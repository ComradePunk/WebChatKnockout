@{
    ViewData["Title"] = "Home Page";
}

@if (User.Identity.IsAuthenticated)
{
    @section Scripts {
        <script>

            function sendAjaxRequest(httpMethod, callback, url, data = null) {
                $.ajax(url, {
                    type: httpMethod,
                    data: data == null ? null : JSON.stringify(data),
                    dataType: "json",
                    contentType: "application/json",
                    success: callback
                });
            }

            const MessageSent = "Sent";
            const MessageReceived = "Received";
            const MessageRead = "Read";

            class MessageListViewModel {
                constructor() {
                    this.chatScrollRelativePosition = 0;
                    this.requestIsRunning = false;
                    this.window = document.getElementById("messageUnorderedList");
                    this.messages = ko.observableArray();
                    this.messagesByIds = {};
                }
            }

            class ChatViewModel {
                constructor() {
                    let self = this;

                    this.currentUser = { id: ko.observable(), userName: ko.observable() };

                    this.onlineUsers = ko.observableArray();
                    this.onlineUsersByIds = {};

                    this.chats = ko.observableArray();
                    this.chatsByIds = {};
                    this.selectedChatId = ko.observable(null);

                    this.messageList = new MessageListViewModel();

                    this.message = ko.observable('');

                    this.connection = new signalR.HubConnectionBuilder().withUrl("/webChatHub").build();

                    this.connection.on("ReceiveMessage", function (message) {
                        if (message === null)
                            return;

                        message = ko.observable(message);

                        if (self.selectedChatId() === message().chatId) {
                            self.messageList.messages.push(message);
                            self.messageList.messagesByIds[message().id] = message;
                            self.scrollToBottom(self);
                            if (message().senderId != self.currentUser.id()) {
                                self.addUnreadMessagesToChat(self, message().chatId, 1);
                                self.readMessage(self, message);
                            }
                        }
                        else if (message().senderId !== self.currentUser.id()) {
                            switch (message().status) {
                                case MessageSent:
                                    self.addUnreadMessagesToChat(self, message().chatId, 1);
                                    self.connection.invoke("MessageRecepientGotMessage", message().id);
                                    break;

                                case MessageReceived:
                                    self.addUnreadMessagesToChat(self, message().chatId, 1);
                                    break;
                            }
                        }
                    });

                    this.connection.on("MessageReceived", function (messageId) {
                        if (!self.messageList.messagesByIds.hasOwnProperty(messageId))
                            return;

                        let message = self.messageList.messagesByIds[messageId];
                        if (message().status !== MessageSent)
                            return;

                        message().status = MessageReceived;
                        message.valueHasMutated();
                    });

                    this.connection.on("MessageRead", function (messageId) {
                        if (!self.messageList.messagesByIds.hasOwnProperty(messageId))
                            return;

                        let message = self.messageList.messagesByIds[messageId];
                        if (message().status === MessageRead)
                            return;

                        message().status = MessageRead;
                        message.valueHasMutated();

                        if (message().senderId === self.currentUser.id())
                            return;

                        self.addUnreadMessagesToChat(self, self.selectedChatId(), -1);
                    });

                    this.connection.on("ChatCreated", function (chat) {
                        chat = ko.observable(chat);
                        if (!self.chatsByIds.hasOwnProperty(chat().id)) {
                            self.chatsByIds[chat().id] = chat;
                            self.chats.unshift(chat);
                            self.selectedChatId(chat().id);
                        }
                        else {
                            self.openChat(self, self.chatsByIds[chat().id]);
                        }
                    });

                    this.connection.on("UserLoggedIn", function (user) {
                        if (self.onlineUsersByIds.hasOwnProperty(user.id))
                            return;

                        self.onlineUsersByIds[user.id] = user;
                        self.onlineUsers.unshift(user);
                    });

                    this.connection.on("UserLoggedOut", function (user) {
                        if (!self.onlineUsersByIds.hasOwnProperty(user.id))
                            return;

                        for (let i = 0; i < self.onlineUsers().length; i++) {
                            if (self.onlineUsers()[i].id === user.id) {
                                self.onlineUsers().splice(i, 1);
                                break;
                            }
                        }
                        delete self.onlineUsersByIds[user.id];
                        self.onlineUsers.valueHasMutated();
                    })

                    this.connection.start();
                }

                addUnreadMessagesToChat(self, chatId, count) {
                    let changedChat = self.chatsByIds[chatId];
                    changedChat().unreadMessagesCount += count;
                    changedChat.valueHasMutated();
                }

                getCurrentUser() {
                    let self = this;
                    sendAjaxRequest("GET", function (data) {
                        self.currentUser.id(data.id);
                        self.currentUser.userName(data.userName);
                    }, "api/users/currentUser");
                }

                getOnlineUsers() {
                    let self = this;
                    sendAjaxRequest("GET", function (data) {
                        self.onlineUsers.removeAll();
                        self.onlineUsersByIds = {};
                        for (let i = 0; i < data.length; i++) {
                            let user = data[i];
                            self.onlineUsers.push(user);
                            self.onlineUsersByIds[user.id] = user;
                        }
                    }, "api/users/online");
                }

                getChats() {
                    let self = this;
                    sendAjaxRequest("GET", function (data) {
                        self.chats.removeAll();
                        for (let i = 0; i < data.length; i++) {
                            let chat = ko.observable(data[i]);
                            self.chatsByIds[chat().id] = chat;
                            self.chats.push(chat);
                        }
                    }, "api/chat");
                }

                createChat(root, user) {
                    root.connection.invoke("CreateChat", user);
                }

                readMessage(root, message) {
                    if (message().status !== MessageRead && message().senderId != root.currentUser.id())
                        this.connection.invoke("ReadMessage", message().id);
                }

                insertNewMessages(root, messages) {
                    for (let i = 0; i < messages.items.length; i++) {
                        let message = ko.observable(messages.items[i]);
                        if (root.messageList.messagesByIds.hasOwnProperty(message().id))
                            continue;

                        root.messageList.messages.unshift(message);
                        root.messageList.messagesByIds[message().id] = message;
                        root.readMessage(root, message);
                    }
                }

                scrollToBottom(root) {
                    root.messageList.window.scrollTop = root.messageList.window.scrollHeight;
                }

                openChat(root, chat) {
                    if (!ko.isObservable(chat))
                        chat = root.chatsByIds[chat.id];

                    if (root.selectedChatId() !== null && root.selectedChatId() === chat().id)
                        return;

                    root.messageList.messages.removeAll();
                    root.messageList.messagesByIds = {};
                    root.selectedChatId(chat().id);

                    sendAjaxRequest("GET", function (data) {
                        root.insertNewMessages(root, data);
                        root.scrollToBottom(root);
                    }, "api/messages/" + chat().id + "?pageNumber=1&pageSize=10");
                }

                requestOlderMessages(root) {
                    if (root.messageList.requestIsRunning)
                        return;

                    root.messageList.requestIsRunning = true;

                    let messagesPerPage = 10;
                    let messagesCount = root.messageList.messages().length;
                    let currentPage = Math.floor(messagesCount / messagesPerPage);
                    let nextPage = currentPage + 1;

                    sendAjaxRequest("GET", function (data) {
                        root.insertNewMessages(root, data);
                        root.messageList.requestIsRunning = false;
                        let newMessagesCount = root.messageList.messages().length;
                        if (newMessagesCount == messagesCount)
                            return;

                        root.messageList.chatScrollRelativePosition = 1;
                        root.messageList.window.scrollTop = (1.0 - currentPage / nextPage) * root.messageList.window.scrollHeight;
                    }, "api/messages/" + root.selectedChatId() + "?pageNumber=" + nextPage + "&pageSize=" + messagesPerPage);
                }

                sendMessage() {
                    this.connection.invoke("SendMessage", { chatId: this.selectedChatId(), text: this.message() });
                    this.message('');
                }

                messagesScrolled(root, event) {
                    let element = event.target;
                    let relativePosition = element.scrollTop / element.scrollHeight;
                    let needRequestOlderMessages = relativePosition < root.messageList.chatScrollRelativePosition && relativePosition <= 0.1;

                    root.messageList.chatScrollRelativePosition = relativePosition;

                    if (needRequestOlderMessages)
                        root.requestOlderMessages(root);
                }
            }

            $(document).ready(function () {
                let model = new ChatViewModel();
                ko.applyBindings(model);

                model.getCurrentUser();
                model.getOnlineUsers();
                model.getChats();
            });
        </script>
    }

    <div class="d-flex justify-content-end">
        <h3 data-bind="text: currentUser.userName"></h3>
        <form class="mx-3" method="post" asp-controller="Account" asp-action="Logout">
            <input class="border-0 px-4 py-2 rounded font-weight-bold" style="background-color: dodgerblue; color: white" type="submit" value="Выход" />
        </form>
    </div>
    <div class="d-flex flex-row" style="height: 65vh">
        <div class="d-flex flex-column w-25">
            <div class="m-3 overflow-auto" style="height: 40%">
                <h3>Пользователи</h3>
                <ul data-bind="foreach: onlineUsers" class="p-0 m-0" style="list-style-type: none;">
                    <li data-bind="click: $root.createChat.bind($data, $root)">
                        <span data-bind="text: userName"></span>
                    </li>
                </ul>
            </div>

            <div class="m-3 overflow-auto" style="height: 60%">
                <h3>Чаты</h3>
                <ul data-bind="foreach: chats" class="p-0 m-0" style="list-style-type: none;">
                    <li data-bind="click: $root.openChat.bind($data, $root)">
                        <span data-bind="text: name"></span>
                        <span data-bind="text: unreadMessagesCount"></span>
                        <span data-bind="text: isOnline"></span>
                    </li>
                </ul>
            </div>
        </div>

        <div class="d-flex flex-column w-75">
            <div class="m-3 h-75" data-bind="visible: selectedChatId() !== null">
                <h3 class="h-auto">Сообщения</h3>
                <ul id="messageUnorderedList" data-bind="foreach: messageList.messages, event: { scroll: messagesScrolled }" class="p-0 m-0 overflow-auto" style="height: 90%; list-style-type: none;">
                    <li class="mb-3">
                        <div class="d-flex flex-row justify-content-between">
                            <span class="font-weight-bold" data-bind="text: senderName"></span>
                            <span data-bind="text: moment(sentTime).format('DD.MM.yyyy hh:mm')"></span>
                        </div>
                        <div class="d-flex flex-row justify-content-between">
                            <span class="font-italic" data-bind="text: text"></span>
                            <span data-bind="text: status"></span>
                        </div>
                    </li>
                </ul>
            </div>
            <div class="w-100 d-flex h-auto my-2">
                <textarea class="h-auto mr-1" style="width:93%" data-bind="visible: selectedChatId() !== null, textInput: message"> </textarea>
                <button class="h-100 border-0 p-3 rounded font-weight-bold" style="width: 5%; background-color: dodgerblue; color: white" data-bind="visible: selectedChatId() !== null, enable: message() !== '', click: sendMessage">&gt;</button>
            </div>
        </div>
    </div>

}
else
{
    <a asp-controller="Account" asp-action="Login">Вход</a>
    <a asp-controller="Account" asp-action="Register">Регистрация</a>
}
