@{
    ViewData["Title"] = "Home Page";
}

@if (User.Identity.IsAuthenticated)
{
    @section Scripts {
        <script>

            function sendAjaxRequest(httpMethod, callback, url, data = null) {
                $.ajax(url, {
                    type: httpMethod,
                    data: data == null ? null : JSON.stringify(data),
                    dataType: "json",
                    contentType: "application/json",
                    success: callback
                });
            }

            class ChatViewModel {
                constructor() {
                    let self = this;

                    this.onlineUsers = ko.observableArray();
                    this.onlineUsersByIds = {};

                    this.chats = ko.observableArray();
                    this.chatsByIds = {};
                    this.selectedChatId = ko.observable(null);

                    this.messages = ko.observableArray();
                    this.messagesByIds = {};

                    this.message = ko.observable('');

                    this.connection = new signalR.HubConnectionBuilder().withUrl("/webChatHub").build();

                    this.connection.on("ReceiveMessage", function (message) {
                        if (message === null)
                            return;

                        if (!message.isRead) {
                            let changedChat = self.chatsByIds[message.chatId];
                            changedChat().unreadMessagesCount++;
                            changedChat.valueHasMutated();
                        }

                        if (self.selectedChatId() === message.chatId) {
                            message = ko.observable(message);
                            self.messages.push(message);
                            self.messagesByIds[message().id] = message;
                            self.readMessage(message);
                        }
                    });

                    this.connection.on("MessageRead", function (messageId) {
                        if (!self.messagesByIds.hasOwnProperty(messageId))
                            return;

                        let message = self.messagesByIds[messageId];
                        if (message().isRead)
                            return;

                        message().isRead = true;
                        message.valueHasMutated();
                        let changedChat = self.chatsByIds[self.selectedChatId()];
                        changedChat().unreadMessagesCount--;
                        changedChat.valueHasMutated();
                    });

                    this.connection.on("ChatCreated", function (chat) {
                        if (!self.chatsByIds.hasOwnProperty(chat.id)) {
                            chat = ko.observable(chat);
                            self.chatsByIds[chat().id] = chat;
                            self.chats.unshift(chat);
                            self.selectedChatId(chat().id);
                        }
                        else {
                            self.openChat(self, self.chatsByIds[chat.id]);
                        }
                    });

                    this.connection.on("UserLoggedIn", function (user) {
                        if (self.onlineUsersByIds.hasOwnProperty(user.id))
                            return;

                        self.onlineUsersByIds[user.id] = user;
                        self.onlineUsers.unshift(user);
                    });

                    this.connection.on("UserLoggedOut", function (user) {
                        if (!self.onlineUsersByIds.hasOwnProperty(user.id))
                            return;

                        for (let i = 0; i < self.onlineUsers().length; i++) {
                            if (self.onlineUsers()[i].id === user.id) {
                                self.onlineUsers().splice(i, 1);
                                break;
                            }
                        }
                        delete self.onlineUsersByIds[user.id];
                        self.onlineUsers.valueHasMutated();
                    })

                    this.connection.start();
                }

                getOnlineUsers() {
                    let self = this;
                    sendAjaxRequest("GET", function (data) {
                        self.onlineUsers.removeAll();
                        self.onlineUsersByIds = {};
                        for (let i = 0; i < data.length; i++) {
                            let user = data[i];
                            self.onlineUsers.push(user);
                            self.onlineUsersByIds[user.id] = user;
                        }
                    }, "api/users/online");
                }

                getChats() {
                    let self = this;
                    sendAjaxRequest("GET", function (data) {
                        self.chats.removeAll();
                        for (let i = 0; i < data.length; i++) {
                            let chat = ko.observable(data[i]);
                            self.chatsByIds[chat().id] = chat;
                            self.chats.push(chat);
                        }
                    }, "api/chat");
                }

                createChat(root, user) {
                    root.connection.invoke("CreateChat", user);
                }

                readMessage(message) {
                    if (!message().isRead)
                        this.connection.invoke("ReadMessage", message().id);
                }

                openChat(root, chat) {
                    if (!ko.isObservable(chat))
                        chat = root.chatsByIds[chat.id];

                    if (root.selectedChatId() !== null && root.selectedChatId() === chat().id)
                        return;

                    root.messages.removeAll();
                    root.selectedChatId(chat().id);

                    sendAjaxRequest("GET", function (data) {
                        for (let i = 0; i < data.items.length; i++) {
                            let message = ko.observable(data.items[i]);
                            root.messages.unshift(message);
                            root.messagesByIds[message().id] = message;
                            root.readMessage(message);
                        }
                    }, "api/messages/" + chat().id);
                }

                sendMessage() {
                    this.connection.invoke("SendMessage", { chatId: this.selectedChatId(), text: this.message() });
                    this.message('');
                }
            }

            $(document).ready(function () {
                let model = new ChatViewModel();
                ko.applyBindings(model);

                model.getOnlineUsers();
                model.getChats();
            });
        </script>
    }

    <div class="panel-heading">Пользователи онлайн</div>
    <div class="panel-body">
        <table class="table table-striped">
            <thead><tr><th>Id пользователя</th><th>Имя пользователя</th></tr></thead>
            <tbody data-bind="foreach: onlineUsers">
                <tr data-bind="click: $root.createChat.bind($data, $root)">
                    <td data-bind="text: id"></td>
                    <td data-bind="text: userName"></td>
                </tr>
            </tbody>
        </table>
    </div>

    <div class="panel-heading">Чаты</div>
    <div class="panel-body">
        <table class="table table-striped">
            <thead>
                <tr><th>Имя чата</th><th>Число непрочитанных сообщений</th><th>Есть пользователи онлайн</th></tr>
            </thead>
            <tbody data-bind="foreach: chats">
                <tr data-bind="click: $root.openChat.bind($data, $root)">
                    <td data-bind="text: name"></td>
                    <td data-bind="text: unreadMessagesCount"></td>
                    <td data-bind="text: isOnline"></td>
                </tr>
            </tbody>
        </table>
    </div>

    <div class="panel-heading" data-bind="visible: selectedChatId() !== null">Сообщения</div>
    <div class="panel-body" data-bind="visible: selectedChatId() !== null">
        <table class="table table-striped">
            <thead><tr><th>Sender Name</th><th>Text</th><th>Sent time</th><th>Is read</th></tr></thead>
            <tbody data-bind="foreach: messages">
                <tr>
                    <td data-bind="text: senderName"></td>
                    <td data-bind="text: text"></td>
                    <td data-bind="text: sentTime"></td>
                    <td data-bind="text: isRead"></td>
                </tr>
            </tbody>
        </table>
    </div>


    <input data-bind="visible: selectedChatId() !== null, value: message"/>
    <button data-bind="visible: selectedChatId() !== null, enable: message() !== '', click: sendMessage">Отправить сообщение</button>

    <form method="post" asp-controller="Account" asp-action="Logout">
        <input type="submit" value="Выход" />
    </form>
}
else
{
    <a asp-controller="Account" asp-action="Login">Вход</a>
    <a asp-controller="Account" asp-action="Register">Регистрация</a>
}
